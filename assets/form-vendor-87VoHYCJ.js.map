{"version":3,"file":"form-vendor-87VoHYCJ.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n                else {\n                    iterateFieldsByAction(currentField, action);\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.values) || isObject(_options.defaultValues)\n        ? cloneObject(_options.values || _options.defaultValues) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) && get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if (isBoolean(disabled)) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                let requiredDisabledState = disabled;\n                const currentField = get(_fields, name);\n                if (currentField && isBoolean(currentField._f.disabled)) {\n                    requiredDisabledState || (requiredDisabledState = currentField._f.disabled);\n                }\n                ref.disabled = requiredDisabledState;\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? keepStateOptions.keepDefaultValues && _formValues\n                    ? getDirtyFields(_defaultValues, _formValues)\n                    : _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isPlainObject","key","compact","filter","Boolean","isUndefined","val","get","object","path","defaultValue","result","split","reduce","isBoolean","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","createContext","useFormContext","useContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isKey","test","stringToPath","input","replace","set","index","tempPath","lastIndex","newValue","objValue","isNaN","useController","methods","shouldUnregister","isArrayField","array","_name","_subjects","values","updateValue","_formValues","useState","_getWatch","_removeUnmounted","useWatch","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","isValidating","isValid","errors","_updateFormState","state","_updateValid","useFormState","_registerProps","register","rules","_shouldUnregisterField","_options","updateMounted","field","_fields","_f","mount","_state","action","unregister","_updateDisabledField","fields","onChange","useCallback","onBlur","ref","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","fieldsNames","abortEarly","currentField","refs","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getRuleValue","rule","source","schemaErrorLookup","join","foundError","pop","defaultOptions","reValidateMode","shouldFocusError","createFormControl","flushRootRender","delayErrorCallback","submitCount","isSubmitted","isSubmitting","isSubmitSuccessful","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","all","shouldFocus","getFieldState","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","unsetEmptyArray","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","requiredDisabledState","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","useForm","_formControl","_values"],"mappings":"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","x_google_ignoreList":[0]}