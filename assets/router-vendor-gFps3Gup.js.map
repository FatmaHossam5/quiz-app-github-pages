{"version":3,"file":"router-vendor-gFps3Gup.js","sources":["../../node_modules/@remix-run/router/dist/router.js","../../node_modules/react-router/dist/index.js","../../node_modules/react-router-dom/dist/index.js"],"sourcesContent":["/**\n * @remix-run/router v1.14.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(m => m.route.loader && m.route.loader.hydrate !== true && (loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined));\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.21.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState2;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _dataRouterState;\n    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = React.useContext(NavigationContext);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: _extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = promise._error !== undefined ? AwaitRenderStatus.error : promise._data !== undefined ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.hydrateFallbackElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","/**\n * React Router DOM v6.21.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"unstable_viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"unstable_viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"unstable_viewTransition\"];\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      unstable_flushSync: flushSync,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    let isViewTransitionUnavailable = router.window == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && unstable_viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    unstable_viewTransition: unstable_viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        unstable_viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        unstable_flushSync: options.unstable_flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        unstable_flushSync: options.unstable_flushSync,\n        unstable_viewTransition: options.unstable_viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params.delete(\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useViewTransitionState as unstable_useViewTransitionState, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };\n//# sourceMappingURL=index.js.map\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createBrowserHistory","options","getLocation","createHref","validateLocation","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","index","getIndex","replaceState","state","idx","handlePop","nextIndex","delta","location","push","to","Push","createLocation","historyState","getHistoryState","url","pushState","error","DOMException","name","replace","Replace","createURL","base","origin","href","createPath","invariant","URL","listen","fn","Error","addEventListener","removeEventListener","encodeLocation","pathname","search","hash","go","n","getUrlBasedHistory","usr","value","message","warning","cond","e","current","parsePath","Math","random","toString","substr","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","slice","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","ErrorResponseImpl","constructor","status","statusText","data","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","init","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","dataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","hasLazyRoutes","m","lazy","hasLoaders","loader","loaderData","errors","hydrate","pendingNavigationController","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","has","subscriber","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","delete","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","size","k","set","priorPaths","get","currentLocation","nextLocation","toPaths","add","getSavedScrollPosition","async","startNavigation","abort","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","isHashChangeOnly","submission","AbortController","pendingActionData","pendingError","request","createClientSideRequest","signal","findNearestBoundary","actionOutput","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","aborted","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","getLoadingNavigation","Request","fetcherSubmission","initialHydration","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","controller","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","redirect","findRedirect","fetcherKey","processLoaderData","deferredData","subscribe","done","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","_temp2","revalidate","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","Promise","all","resolveDeferredResults","interruptActiveLoads","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref2","entries","Array","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","cancel","handle","convertRouteMatchToUiMatch","y","initialize","_window","transitions","sessionPositions","sessionStorage","getItem","parse","v","isArray","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","unstable_viewTransition","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","revalidationRequest","loadId","loadFetcher","staleKey","r","handleFetcherAction","resolveDeferredData","handleFetcherLoader","count","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","acc","_ref3","String","convertFormDataToSearchParams","convertSearchParamsToFormData","append","isInitialLoad","values","currentUrl","nextUrl","boundaryId","boundaryMatches","findIndex","getLoaderMatchesUntilBoundary","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","reject","abortPromise","race","context","requestContext","handlerError","catch","headers","isStaticRequest","protocol","isSameBasename","isRouteRequest","response","contentType","statusCode","_result$init","_result$init2","deferred","resolveData","isDeferredData","Headers","foundError","loaderHeaders","processRouteLoaderData","newLoaderData","mergedLoaderData","reverse","find","_temp5","errorMessage","signals","isRevalidatingLoader","then","unwrap","unwrappedData","getAll","DataRouterContext","React.createContext","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","React.useContext","useContext","useLocation","UNSAFE_invariant","useIsomorphicLayoutEffect","cb","static","React.useLayoutEffect","useNavigate","ctx","useDataRouterContext","DataRouterHook","UseNavigateStable","useCurrentRouteId","DataRouterStateHook","activeRef","React.useRef","React.useCallback","useNavigateStable","dataRouterContext","navigator","routePathnamesJson","UNSAFE_getResolveToMatches","useNavigateUnstable","OutletContext","useParams","routeMatch","useResolvedPath","React.useMemo","useRoutesImpl","dataRouterState","parentMatches","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","renderedMatches","_dataRouterState2","_dataRouterState","errorIndex","min","renderFallback","fallbackIndex","HydrateFallback","hydrateFallbackElement","needsToRunLoader","reduceRight","shouldRenderHydrateFallback","errorElement","defaultErrorElement","alreadyWarned","getChildren","React.createElement","Component","reactExports","element","RenderedRoute","routeContext","ErrorBoundary","RenderErrorBoundary","component","_renderMatches","Provider","navigationType","DefaultErrorComponent","_state$errors","useDataRouterState","UseRouteError","useRouteError","stack","preStyles","padding","backgroundColor","React.Fragment","style","fontStyle","React.Component","props","super","getDerivedStateFromError","getDerivedStateFromProps","componentDidCatch","errorInfo","render","staticContext","_deepestRenderedBoundaryId","hookName","useRouteContext","thisRoute","Navigate","_ref4","isStatic","jsonPath","React.useEffect","Outlet","useOutlet","Router","_ref5","basenameProp","locationProp","staticProp","navigationContext","locationContext","trailingPathname","updates","_excluded","createBrowserRouter","parseHydrationData","__staticRouterHydrationData","deserializeErrors","serialized","val","__type","UNSAFE_ErrorResponseImpl","__subType","ErrorConstructor","ViewTransitionContext","isTransitioning","FetchersContext","createContext","startTransitionImpl","React","flushSyncImpl","ReactDOM","flushSyncSafe","Deferred","promise","resolve","reason","RouterProvider","fallbackElement","setStateImpl","React.useState","pendingState","setPendingState","useState","vtContext","setVtContext","renderDfd","setRenderDfd","transition","setTransition","interruption","setInterruption","fetcherData","v7_startTransition","optInStartTransition","startTransitionSafe","setState","isViewTransitionUnavailable","startViewTransition","skipTransition","t","finished","finally","renderPromise","transition2","UNSAFE_DataRouterContext","UNSAFE_DataRouterStateContext","DataRoutes","UNSAFE_useRoutesImpl","Link","React.forwardRef","_ref7","ref","absoluteHref","onClick","excluded","sourceKeys","_objectWithoutPropertiesLoose","UNSAFE_NavigationContext","isExternal","targetUrl","joinedPathname","useHref","internalOnClick","replaceProp","event","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","preventDefault","useLinkClickHandler","defaultPrevented"],"mappings":"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","x_google_ignoreList":[0,1,2]}